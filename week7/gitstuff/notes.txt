Git!
What is Git?
    - server that holds software
    - can fetch that software
What is a repo?
    - Historical timeline of your development

Commit References
    Absolute
        Commit ID  - All commits have a unique ID
        HEAD       - currently checkedout commit
        Branchname - HEAD inside of branch
    
    Relative
        git checkout HEAD - does nothing, just going to where you're currently checked out

        git checkout HEAD~
            ~ - Vertical ancestry
        git checkout HEAD^
            ^ - Horizontal ancestry (# parent)

One local branch
    - Where are you?
        - git status
    - What's come before?
        - git log
        - git log --oneline --all --graph --decorate
    - What's changed?
        - git diff [commitID1] [commitID2]

Going back in time
    git checkout [commitID] - takes you back in time to see what the code looked like then

    git reset --hard [commitID / HEAD] - destroys commits in the future from the commit / HEAD

    git revert [commitID] - create a NEW commit that undoes the changes from the selected commit

Branches
    Making a branch
        - git checkout -b [branchname] - create a branch and check it out
        - git branch [branchname] - create a branch, does NOT check it out

        - git branch - list local branches and show which branch you've checked out

        - git merge [branchname] - merge the currently checked out branch with the specified branch

Git Flow
Long Term Branches
    Master Branch  - NEVER have broken code in it (FAIL)
    Develop Branch - SHOULDN'T have broken in it

Short Term Branches
    Feature Branches - branched from Develop, for larger features / development
    Bugfix Branches  - branched from Develop, for fixing bugs that exist within the Develop branch
    Hotfix Branches  - branched from Master, like bugfix branches, but much more important - 